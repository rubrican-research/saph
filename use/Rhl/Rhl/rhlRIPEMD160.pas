unit rhlRIPEMD160;

interface

uses
  rhlMDBase;

type

  { TrhlRIPEMD160 }

  TrhlRIPEMD160 = class(TrhlMDBase)
  protected
    procedure UpdateBlock(const AData); override;
  public
    constructor Create; override;
    procedure Init; override;
  end;

implementation

{ TrhlRIPEMD160 }

procedure TrhlRIPEMD160.UpdateBlock(const AData);
var
  data: array[0..15] of DWord absolute AData;
  a, b, c, d, e, aa, bb, cc, dd, ee: DWord;
begin
  a := FH[0];
  b := FH[1];
  c := FH[2];
  d := FH[3];
  e := FH[4];
  aa := a;
  bb := b;
  cc := c;
  dd := d;
  ee := e;

  a += data[0] + (b xor c xor d);
  a := ((a shl 11) or (a shr (32 - 11))) + e;
  c := (c shl 10) or (c shr (32 - 10));
  e += data[1] + (a xor b xor c);
  e := ((e shl 14) or (e shr (32 - 14))) + d;
  b := (b shl 10) or (b shr (32 - 10));
  d += data[2] + (e xor a xor b);
  d := ((d shl 15) or (d shr (32 - 15))) + c;
  a := (a shl 10) or (a shr (32 - 10));
  c += data[3] + (d xor e xor a);
  c := ((c shl 12) or (c shr (32 - 12))) + b;
  e := (e shl 10) or (e shr (32 - 10));
  b += data[4] + (c xor d xor e);
  b := ((b shl 5) or (b shr (32 - 5))) + a;
  d := (d shl 10) or (d shr (32 - 10));
  a += data[5] + (b xor c xor d);
  a := ((a shl 8) or (a shr (32 - 8))) + e;
  c := (c shl 10) or (c shr (32 - 10));
  e += data[6] + (a xor b xor c);
  e := ((e shl 7) or (e shr (32 - 7))) + d;
  b := (b shl 10) or (b shr (32 - 10));
  d += data[7] + (e xor a xor b);
  d := ((d shl 9) or (d shr (32 - 9))) + c;
  a := (a shl 10) or (a shr (32 - 10));
  c += data[8] + (d xor e xor a);
  c := ((c shl 11) or (c shr (32 - 11))) + b;
  e := (e shl 10) or (e shr (32 - 10));
  b += data[9] + (c xor d xor e);
  b := ((b shl 13) or (b shr (32 - 13))) + a;
  d := (d shl 10) or (d shr (32 - 10));
  a += data[10] + (b xor c xor d);
  a := ((a shl 14) or (a shr (32 - 14))) + e;
  c := (c shl 10) or (c shr (32 - 10));
  e += data[11] + (a xor b xor c);
  e := ((e shl 15) or (e shr (32 - 15))) + d;
  b := (b shl 10) or (b shr (32 - 10));
  d += data[12] + (e xor a xor b);
  d := ((d shl 6) or (d shr (32 - 6))) + c;
  a := (a shl 10) or (a shr (32 - 10));
  c += data[13] + (d xor e xor a);
  c := ((c shl 7) or (c shr (32 - 7))) + b;
  e := (e shl 10) or (e shr (32 - 10));
  b += data[14] + (c xor d xor e);
  b := ((b shl 9) or (b shr (32 - 9))) + a;
  d := (d shl 10) or (d shr (32 - 10));
  a += data[15] + (b xor c xor d);
  a := ((a shl 8) or (a shr (32 - 8))) + e;
  c := (c shl 10) or (c shr (32 - 10));

  aa += data[5] + FC[1] + (bb xor (cc or not dd));
  aa := ((aa shl 8) or (aa shr (32 - 8))) + ee;
  cc := (cc shl 10) or (cc shr (32 - 10));
  ee += data[14] + FC[1] + (aa xor (bb or not cc));
  ee := ((ee shl 9) or (ee shr (32 - 9))) + dd;
  bb := (bb shl 10) or (bb shr (32 - 10));
  dd += data[7] + FC[1] + (ee xor (aa or not bb));
  dd := ((dd shl 9) or (dd shr (32 - 9))) + cc;
  aa := (aa shl 10) or (aa shr (32 - 10));
  cc += data[0] + FC[1] + (dd xor (ee or not aa));
  cc := ((cc shl 11) or (cc shr (32 - 11))) + bb;
  ee := (ee shl 10) or (ee shr (32 - 10));
  bb += data[9] + FC[1] + (cc xor (dd or not ee));
  bb := ((bb shl 13) or (bb shr (32 - 13))) + aa;
  dd := (dd shl 10) or (dd shr (32 - 10));
  aa += data[2] + FC[1] + (bb xor (cc or not dd));
  aa := ((aa shl 15) or (aa shr (32 - 15))) + ee;
  cc := (cc shl 10) or (cc shr (32 - 10));
  ee += data[11] + FC[1] + (aa xor (bb or not cc));
  ee := ((ee shl 15) or (ee shr (32 - 15))) + dd;
  bb := (bb shl 10) or (bb shr (32 - 10));
  dd += data[4] + FC[1] + (ee xor (aa or not bb));
  dd := ((dd shl 5) or (dd shr (32 - 5))) + cc;
  aa := (aa shl 10) or (aa shr (32 - 10));
  cc += data[13] + FC[1] + (dd xor (ee or not aa));
  cc := ((cc shl 7) or (cc shr (32 - 7))) + bb;
  ee := (ee shl 10) or (ee shr (32 - 10));
  bb += data[6] + FC[1] + (cc xor (dd or not ee));
  bb := ((bb shl 7) or (bb shr (32 - 7))) + aa;
  dd := (dd shl 10) or (dd shr (32 - 10));
  aa += data[15] + FC[1] + (bb xor (cc or not dd));
  aa := ((aa shl 8) or (aa shr (32 - 8))) + ee;
  cc := (cc shl 10) or (cc shr (32 - 10));
  ee += data[8] + FC[1] + (aa xor (bb or not cc));
  ee := ((ee shl 11) or (ee shr (32 - 11))) + dd;
  bb := (bb shl 10) or (bb shr (32 - 10));
  dd += data[1] + FC[1] + (ee xor (aa or not bb));
  dd := ((dd shl 14) or (dd shr (32 - 14))) + cc;
  aa := (aa shl 10) or (aa shr (32 - 10));
  cc += data[10] + FC[1] + (dd xor (ee or not aa));
  cc := ((cc shl 14) or (cc shr (32 - 14))) + bb;
  ee := (ee shl 10) or (ee shr (32 - 10));
  bb += data[3] + FC[1] + (cc xor (dd or not ee));
  bb := ((bb shl 12) or (bb shr (32 - 12))) + aa;
  dd := (dd shl 10) or (dd shr (32 - 10));
  aa += data[12] + FC[1] + (bb xor (cc or not dd));
  aa := ((aa shl 6) or (aa shr (32 - 6))) + ee;
  cc := (cc shl 10) or (cc shr (32 - 10));

  e += data[7] + FC[2] + ((a and b) or (not a and c));
  e := ((e shl 7) or (e shr (32 - 7))) + d;
  b := (b shl 10) or (b shr (32 - 10));
  d += data[4] + FC[2] + ((e and a) or (not e and b));
  d := ((d shl 6) or (d shr (32 - 6))) + c;
  a := (a shl 10) or (a shr (32 - 10));
  c += data[13] + FC[2] + ((d and e) or (not d and a));
  c := ((c shl 8) or (c shr (32 - 8))) + b;
  e := (e shl 10) or (e shr (32 - 10));
  b += data[1] + FC[2] + ((c and d) or (not c and e));
  b := ((b shl 13) or (b shr (32 - 13))) + a;
  d := (d shl 10) or (d shr (32 - 10));
  a += data[10] + FC[2] + ((b and c) or (not b and d));
  a := ((a shl 11) or (a shr (32 - 11))) + e;
  c := (c shl 10) or (c shr (32 - 10));
  e += data[6] + FC[2] + ((a and b) or (not a and c));
  e := ((e shl 9) or (e shr (32 - 9))) + d;
  b := (b shl 10) or (b shr (32 - 10));
  d += data[15] + FC[2] + ((e and a) or (not e and b));
  d := ((d shl 7) or (d shr (32 - 7))) + c;
  a := (a shl 10) or (a shr (32 - 10));
  c += data[3] + FC[2] + ((d and e) or (not d and a));
  c := ((c shl 15) or (c shr (32 - 15))) + b;
  e := (e shl 10) or (e shr (32 - 10));
  b += data[12] + FC[2] + ((c and d) or (not c and e));
  b := ((b shl 7) or (b shr (32 - 7))) + a;
  d := (d shl 10) or (d shr (32 - 10));
  a += data[0] + FC[2] + ((b and c) or (not b and d));
  a := ((a shl 12) or (a shr (32 - 12))) + e;
  c := (c shl 10) or (c shr (32 - 10));
  e += data[9] + FC[2] + ((a and b) or (not a and c));
  e := ((e shl 15) or (e shr (32 - 15))) + d;
  b := (b shl 10) or (b shr (32 - 10));
  d += data[5] + FC[2] + ((e and a) or (not e and b));
  d := ((d shl 9) or (d shr (32 - 9))) + c;
  a := (a shl 10) or (a shr (32 - 10));
  c += data[2] + FC[2] + ((d and e) or (not d and a));
  c := ((c shl 11) or (c shr (32 - 11))) + b;
  e := (e shl 10) or (e shr (32 - 10));
  b += data[14] + FC[2] + ((c and d) or (not c and e));
  b := ((b shl 7) or (b shr (32 - 7))) + a;
  d := (d shl 10) or (d shr (32 - 10));
  a += data[11] + FC[2] + ((b and c) or (not b and d));
  a := ((a shl 13) or (a shr (32 - 13))) + e;
  c := (c shl 10) or (c shr (32 - 10));
  e += data[8] + FC[2] + ((a and b) or (not a and c));
  e := ((e shl 12) or (e shr (32 - 12))) + d;
  b := (b shl 10) or (b shr (32 - 10));

  ee += data[6] + FC[3] + ((aa and cc) or (bb and not cc));
  ee := ((ee shl 9) or (ee shr (32 - 9))) + dd;
  bb := (bb shl 10) or (bb shr (32 - 10));
  dd += data[11] + FC[3] + ((ee and bb) or (aa and not bb));
  dd := ((dd shl 13) or (dd shr (32 - 13))) + cc;
  aa := (aa shl 10) or (aa shr (32 - 10));
  cc += data[3] + FC[3] + ((dd and aa) or (ee and not aa));
  cc := ((cc shl 15) or (cc shr (32 - 15))) + bb;
  ee := (ee shl 10) or (ee shr (32 - 10));
  bb += data[7] + FC[3] + ((cc and ee) or (dd and not ee));
  bb := ((bb shl 7) or (bb shr (32 - 7))) + aa;
  dd := (dd shl 10) or (dd shr (32 - 10));
  aa += data[0] + FC[3] + ((bb and dd) or (cc and not dd));
  aa := ((aa shl 12) or (aa shr (32 - 12))) + ee;
  cc := (cc shl 10) or (cc shr (32 - 10));
  ee += data[13] + FC[3] + ((aa and cc) or (bb and not cc));
  ee := ((ee shl 8) or (ee shr (32 - 8))) + dd;
  bb := (bb shl 10) or (bb shr (32 - 10));
  dd += data[5] + FC[3] + ((ee and bb) or (aa and not bb));
  dd := ((dd shl 9) or (dd shr (32 - 9))) + cc;
  aa := (aa shl 10) or (aa shr (32 - 10));
  cc += data[10] + FC[3] + ((dd and aa) or (ee and not aa));
  cc := ((cc shl 11) or (cc shr (32 - 11))) + bb;
  ee := (ee shl 10) or (ee shr (32 - 10));
  bb += data[14] + FC[3] + ((cc and ee) or (dd and not ee));
  bb := ((bb shl 7) or (bb shr (32 - 7))) + aa;
  dd := (dd shl 10) or (dd shr (32 - 10));
  aa += data[15] + FC[3] + ((bb and dd) or (cc and not dd));
  aa := ((aa shl 7) or (aa shr (32 - 7))) + ee;
  cc := (cc shl 10) or (cc shr (32 - 10));
  ee += data[8] + FC[3] + ((aa and cc) or (bb and not cc));
  ee := ((ee shl 12) or (ee shr (32 - 12))) + dd;
  bb := (bb shl 10) or (bb shr (32 - 10));
  dd += data[12] + FC[3] + ((ee and bb) or (aa and not bb));
  dd := ((dd shl 7) or (dd shr (32 - 7))) + cc;
  aa := (aa shl 10) or (aa shr (32 - 10));
  cc += data[4] + FC[3] + ((dd and aa) or (ee and not aa));
  cc := ((cc shl 6) or (cc shr (32 - 6))) + bb;
  ee := (ee shl 10) or (ee shr (32 - 10));
  bb += data[9] + FC[3] + ((cc and ee) or (dd and not ee));
  bb := ((bb shl 15) or (bb shr (32 - 15))) + aa;
  dd := (dd shl 10) or (dd shr (32 - 10));
  aa += data[1] + FC[3] + ((bb and dd) or (cc and not dd));
  aa := ((aa shl 13) or (aa shr (32 - 13))) + ee;
  cc := (cc shl 10) or (cc shr (32 - 10));
  ee += data[2] + FC[3] + ((aa and cc) or (bb and not cc));
  ee := ((ee shl 11) or (ee shr (32 - 11))) + dd;
  bb := (bb shl 10) or (bb shr (32 - 10));

  d += data[3] + FC[4] + ((e or not a) xor b);
  d := ((d shl 11) or (d shr (32 - 11))) + c;
  a := (a shl 10) or (a shr (32 - 10));
  c += data[10] + FC[4] + ((d or not e) xor a);
  c := ((c shl 13) or (c shr (32 - 13))) + b;
  e := (e shl 10) or (e shr (32 - 10));
  b += data[14] + FC[4] + ((c or not d) xor e);
  b := ((b shl 6) or (b shr (32 - 6))) + a;
  d := (d shl 10) or (d shr (32 - 10));
  a += data[4] + FC[4] + ((b or not c) xor d);
  a := ((a shl 7) or (a shr (32 - 7))) + e;
  c := (c shl 10) or (c shr (32 - 10));
  e += data[9] + FC[4] + ((a or not b) xor c);
  e := ((e shl 14) or (e shr (32 - 14))) + d;
  b := (b shl 10) or (b shr (32 - 10));
  d += data[15] + FC[4] + ((e or not a) xor b);
  d := ((d shl 9) or (d shr (32 - 9))) + c;
  a := (a shl 10) or (a shr (32 - 10));
  c += data[8] + FC[4] + ((d or not e) xor a);
  c := ((c shl 13) or (c shr (32 - 13))) + b;
  e := (e shl 10) or (e shr (32 - 10));
  b += data[1] + FC[4] + ((c or not d) xor e);
  b := ((b shl 15) or (b shr (32 - 15))) + a;
  d := (d shl 10) or (d shr (32 - 10));
  a += data[2] + FC[4] + ((b or not c) xor d);
  a := ((a shl 14) or (a shr (32 - 14))) + e;
  c := (c shl 10) or (c shr (32 - 10));
  e += data[7] + FC[4] + ((a or not b) xor c);
  e := ((e shl 8) or (e shr (32 - 8))) + d;
  b := (b shl 10) or (b shr (32 - 10));
  d += data[0] + FC[4] + ((e or not a) xor b);
  d := ((d shl 13) or (d shr (32 - 13))) + c;
  a := (a shl 10) or (a shr (32 - 10));
  c += data[6] + FC[4] + ((d or not e) xor a);
  c := ((c shl 6) or (c shr (32 - 6))) + b;
  e := (e shl 10) or (e shr (32 - 10));
  b += data[13] + FC[4] + ((c or not d) xor e);
  b := ((b shl 5) or (b shr (32 - 5))) + a;
  d := (d shl 10) or (d shr (32 - 10));
  a += data[11] + FC[4] + ((b or not c) xor d);
  a := ((a shl 12) or (a shr (32 - 12))) + e;
  c := (c shl 10) or (c shr (32 - 10));
  e += data[5] + FC[4] + ((a or not b) xor c);
  e := ((e shl 7) or (e shr (32 - 7))) + d;
  b := (b shl 10) or (b shr (32 - 10));
  d += data[12] + FC[4] + ((e or not a) xor b);
  d := ((d shl 5) or (d shr (32 - 5))) + c;
  a := (a shl 10) or (a shr (32 - 10));

  dd += data[15] + FC[5] + ((ee or not aa) xor bb);
  dd := ((dd shl 9) or (dd shr (32 - 9))) + cc;
  aa := (aa shl 10) or (aa shr (32 - 10));
  cc += data[5] + FC[5] + ((dd or not ee) xor aa);
  cc := ((cc shl 7) or (cc shr (32 - 7))) + bb;
  ee := (ee shl 10) or (ee shr (32 - 10));
  bb += data[1] + FC[5] + ((cc or not dd) xor ee);
  bb := ((bb shl 15) or (bb shr (32 - 15))) + aa;
  dd := (dd shl 10) or (dd shr (32 - 10));
  aa += data[3] + FC[5] + ((bb or not cc) xor dd);
  aa := ((aa shl 11) or (aa shr (32 - 11))) + ee;
  cc := (cc shl 10) or (cc shr (32 - 10));
  ee += data[7] + FC[5] + ((aa or not bb) xor cc);
  ee := ((ee shl 8) or (ee shr (32 - 8))) + dd;
  bb := (bb shl 10) or (bb shr (32 - 10));
  dd += data[14] + FC[5] + ((ee or not aa) xor bb);
  dd := ((dd shl 6) or (dd shr (32 - 6))) + cc;
  aa := (aa shl 10) or (aa shr (32 - 10));
  cc += data[6] + FC[5] + ((dd or not ee) xor aa);
  cc := ((cc shl 6) or (cc shr (32 - 6))) + bb;
  ee := (ee shl 10) or (ee shr (32 - 10));
  bb += data[9] + FC[5] + ((cc or not dd) xor ee);
  bb := ((bb shl 14) or (bb shr (32 - 14))) + aa;
  dd := (dd shl 10) or (dd shr (32 - 10));
  aa += data[11] + FC[5] + ((bb or not cc) xor dd);
  aa := ((aa shl 12) or (aa shr (32 - 12))) + ee;
  cc := (cc shl 10) or (cc shr (32 - 10));
  ee += data[8] + FC[5] + ((aa or not bb) xor cc);
  ee := ((ee shl 13) or (ee shr (32 - 13))) + dd;
  bb := (bb shl 10) or (bb shr (32 - 10));
  dd += data[12] + FC[5] + ((ee or not aa) xor bb);
  dd := ((dd shl 5) or (dd shr (32 - 5))) + cc;
  aa := (aa shl 10) or (aa shr (32 - 10));
  cc += data[2] + FC[5] + ((dd or not ee) xor aa);
  cc := ((cc shl 14) or (cc shr (32 - 14))) + bb;
  ee := (ee shl 10) or (ee shr (32 - 10));
  bb += data[10] + FC[5] + ((cc or not dd) xor ee);
  bb := ((bb shl 13) or (bb shr (32 - 13))) + aa;
  dd := (dd shl 10) or (dd shr (32 - 10));
  aa += data[0] + FC[5] + ((bb or not cc) xor dd);
  aa := ((aa shl 13) or (aa shr (32 - 13))) + ee;
  cc := (cc shl 10) or (cc shr (32 - 10));
  ee += data[4] + FC[5] + ((aa or not bb) xor cc);
  ee := ((ee shl 7) or (ee shr (32 - 7))) + dd;
  bb := (bb shl 10) or (bb shr (32 - 10));
  dd += data[13] + FC[5] + ((ee or not aa) xor bb);
  dd := ((dd shl 5) or (dd shr (32 - 5))) + cc;
  aa := (aa shl 10) or (aa shr (32 - 10));

  c += data[1] + FC[6] + ((d and a) or (e and not a));
  c := ((c shl 11) or (c shr (32 - 11))) + b;
  e := (e shl 10) or (e shr (32 - 10));
  b += data[9] + FC[6] + ((c and e) or (d and not e));
  b := ((b shl 12) or (b shr (32 - 12))) + a;
  d := (d shl 10) or (d shr (32 - 10));
  a += data[11] + FC[6] + ((b and d) or (c and not d));
  a := ((a shl 14) or (a shr (32 - 14))) + e;
  c := (c shl 10) or (c shr (32 - 10));
  e += data[10] + FC[6] + ((a and c) or (b and not c));
  e := ((e shl 15) or (e shr (32 - 15))) + d;
  b := (b shl 10) or (b shr (32 - 10));
  d += data[0] + FC[6] + ((e and b) or (a and not b));
  d := ((d shl 14) or (d shr (32 - 14))) + c;
  a := (a shl 10) or (a shr (32 - 10));
  c += data[8] + FC[6] + ((d and a) or (e and not a));
  c := ((c shl 15) or (c shr (32 - 15))) + b;
  e := (e shl 10) or (e shr (32 - 10));
  b += data[12] + FC[6] + ((c and e) or (d and not e));
  b := ((b shl 9) or (b shr (32 - 9))) + a;
  d := (d shl 10) or (d shr (32 - 10));
  a += data[4] + FC[6] + ((b and d) or (c and not d));
  a := ((a shl 8) or (a shr (32 - 8))) + e;
  c := (c shl 10) or (c shr (32 - 10));
  e += data[13] + FC[6] + ((a and c) or (b and not c));
  e := ((e shl 9) or (e shr (32 - 9))) + d;
  b := (b shl 10) or (b shr (32 - 10));
  d += data[3] + FC[6] + ((e and b) or (a and not b));
  d := ((d shl 14) or (d shr (32 - 14))) + c;
  a := (a shl 10) or (a shr (32 - 10));
  c += data[7] + FC[6] + ((d and a) or (e and not a));
  c := ((c shl 5) or (c shr (32 - 5))) + b;
  e := (e shl 10) or (e shr (32 - 10));
  b += data[15] + FC[6] + ((c and e) or (d and not e));
  b := ((b shl 6) or (b shr (32 - 6))) + a;
  d := (d shl 10) or (d shr (32 - 10));
  a += data[14] + FC[6] + ((b and d) or (c and not d));
  a := ((a shl 8) or (a shr (32 - 8))) + e;
  c := (c shl 10) or (c shr (32 - 10));
  e += data[5] + FC[6] + ((a and c) or (b and not c));
  e := ((e shl 6) or (e shr (32 - 6))) + d;
  b := (b shl 10) or (b shr (32 - 10));
  d += data[6] + FC[6] + ((e and b) or (a and not b));
  d := ((d shl 5) or (d shr (32 - 5))) + c;
  a := (a shl 10) or (a shr (32 - 10));
  c += data[2] + FC[6] + ((d and a) or (e and not a));
  c := ((c shl 12) or (c shr (32 - 12))) + b;
  e := (e shl 10) or (e shr (32 - 10));

  cc += data[8] + FC[7] + ((dd and ee) or (not dd and aa));
  cc := ((cc shl 15) or (cc shr (32 - 15))) + bb;
  ee := (ee shl 10) or (ee shr (32 - 10));
  bb += data[6] + FC[7] + ((cc and dd) or (not cc and ee));
  bb := ((bb shl 5) or (bb shr (32 - 5))) + aa;
  dd := (dd shl 10) or (dd shr (32 - 10));
  aa += data[4] + FC[7] + ((bb and cc) or (not bb and dd));
  aa := ((aa shl 8) or (aa shr (32 - 8))) + ee;
  cc := (cc shl 10) or (cc shr (32 - 10));
  ee += data[1] + FC[7] + ((aa and bb) or (not aa and cc));
  ee := ((ee shl 11) or (ee shr (32 - 11))) + dd;
  bb := (bb shl 10) or (bb shr (32 - 10));
  dd += data[3] + FC[7] + ((ee and aa) or (not ee and bb));
  dd := ((dd shl 14) or (dd shr (32 - 14))) + cc;
  aa := (aa shl 10) or (aa shr (32 - 10));
  cc += data[11] + FC[7] + ((dd and ee) or (not dd and aa));
  cc := ((cc shl 14) or (cc shr (32 - 14))) + bb;
  ee := (ee shl 10) or (ee shr (32 - 10));
  bb += data[15] + FC[7] + ((cc and dd) or (not cc and ee));
  bb := ((bb shl 6) or (bb shr (32 - 6))) + aa;
  dd := (dd shl 10) or (dd shr (32 - 10));
  aa += data[0] + FC[7] + ((bb and cc) or (not bb and dd));
  aa := ((aa shl 14) or (aa shr (32 - 14))) + ee;
  cc := (cc shl 10) or (cc shr (32 - 10));
  ee += data[5] + FC[7] + ((aa and bb) or (not aa and cc));
  ee := ((ee shl 6) or (ee shr (32 - 6))) + dd;
  bb := (bb shl 10) or (bb shr (32 - 10));
  dd += data[12] + FC[7] + ((ee and aa) or (not ee and bb));
  dd := ((dd shl 9) or (dd shr (32 - 9))) + cc;
  aa := (aa shl 10) or (aa shr (32 - 10));
  cc += data[2] + FC[7] + ((dd and ee) or (not dd and aa));
  cc := ((cc shl 12) or (cc shr (32 - 12))) + bb;
  ee := (ee shl 10) or (ee shr (32 - 10));
  bb += data[13] + FC[7] + ((cc and dd) or (not cc and ee));
  bb := ((bb shl 9) or (bb shr (32 - 9))) + aa;
  dd := (dd shl 10) or (dd shr (32 - 10));
  aa += data[9] + FC[7] + ((bb and cc) or (not bb and dd));
  aa := ((aa shl 12) or (aa shr (32 - 12))) + ee;
  cc := (cc shl 10) or (cc shr (32 - 10));
  ee += data[7] + FC[7] + ((aa and bb) or (not aa and cc));
  ee := ((ee shl 5) or (ee shr (32 - 5))) + dd;
  bb := (bb shl 10) or (bb shr (32 - 10));
  dd += data[10] + FC[7] + ((ee and aa) or (not ee and bb));
  dd := ((dd shl 15) or (dd shr (32 - 15))) + cc;
  aa := (aa shl 10) or (aa shr (32 - 10));
  cc += data[14] + FC[7] + ((dd and ee) or (not dd and aa));
  cc := ((cc shl 8) or (cc shr (32 - 8))) + bb;
  ee := (ee shl 10) or (ee shr (32 - 10));

  b += data[4] + FC[8] + (c xor (d or not e));
  b := ((b shl 9) or (b shr (32 - 9))) + a;
  d := (d shl 10) or (d shr (32 - 10));
  a += data[0] + FC[8] + (b xor (c or not d));
  a := ((a shl 15) or (a shr (32 - 15))) + e;
  c := (c shl 10) or (c shr (32 - 10));
  e += data[5] + FC[8] + (a xor (b or not c));
  e := ((e shl 5) or (e shr (32 - 5))) + d;
  b := (b shl 10) or (b shr (32 - 10));
  d += data[9] + FC[8] + (e xor (a or not b));
  d := ((d shl 11) or (d shr (32 - 11))) + c;
  a := (a shl 10) or (a shr (32 - 10));
  c += data[7] + FC[8] + (d xor (e or not a));
  c := ((c shl 6) or (c shr (32 - 6))) + b;
  e := (e shl 10) or (e shr (32 - 10));
  b += data[12] + FC[8] + (c xor (d or not e));
  b := ((b shl 8) or (b shr (32 - 8))) + a;
  d := (d shl 10) or (d shr (32 - 10));
  a += data[2] + FC[8] + (b xor (c or not d));
  a := ((a shl 13) or (a shr (32 - 13))) + e;
  c := (c shl 10) or (c shr (32 - 10));
  e += data[10] + FC[8] + (a xor (b or not c));
  e := ((e shl 12) or (e shr (32 - 12))) + d;
  b := (b shl 10) or (b shr (32 - 10));
  d += data[14] + FC[8] + (e xor (a or not b));
  d := ((d shl 5) or (d shr (32 - 5))) + c;
  a := (a shl 10) or (a shr (32 - 10));
  c += data[1] + FC[8] + (d xor (e or not a));
  c := ((c shl 12) or (c shr (32 - 12))) + b;
  e := (e shl 10) or (e shr (32 - 10));
  b += data[3] + FC[8] + (c xor (d or not e));
  b := ((b shl 13) or (b shr (32 - 13))) + a;
  d := (d shl 10) or (d shr (32 - 10));
  a += data[8] + FC[8] + (b xor (c or not d));
  a := ((a shl 14) or (a shr (32 - 14))) + e;
  c := (c shl 10) or (c shr (32 - 10));
  e += data[11] + FC[8] + (a xor (b or not c));
  e := ((e shl 11) or (e shr (32 - 11))) + d;
  b := (b shl 10) or (b shr (32 - 10));
  d += data[6] + FC[8] + (e xor (a or not b));
  d := ((d shl 8) or (d shr (32 - 8))) + c;
  a := (a shl 10) or (a shr (32 - 10));
  c += data[15] + FC[8] + (d xor (e or not a));
  c := ((c shl 5) or (c shr (32 - 5))) + b;
  e := (e shl 10) or (e shr (32 - 10));
  b += data[13] + FC[8] + (c xor (d or not e));
  b := ((b shl 6) or (b shr (32 - 6))) + a;
  d := (d shl 10) or (d shr (32 - 10));

  bb += data[12] + (cc xor dd xor ee);
  bb := ((bb shl 8) or (bb shr (32 - 8))) + aa;
  dd := (dd shl 10) or (dd shr (32 - 10));
  aa += data[15] + (bb xor cc xor dd);
  aa := ((aa shl 5) or (aa shr (32 - 5))) + ee;
  cc := (cc shl 10) or (cc shr (32 - 10));
  ee += data[10] + (aa xor bb xor cc);
  ee := ((ee shl 12) or (ee shr (32 - 12))) + dd;
  bb := (bb shl 10) or (bb shr (32 - 10));
  dd += data[4] + (ee xor aa xor bb);
  dd := ((dd shl 9) or (dd shr (32 - 9))) + cc;
  aa := (aa shl 10) or (aa shr (32 - 10));
  cc += data[1] + (dd xor ee xor aa);
  cc := ((cc shl 12) or (cc shr (32 - 12))) + bb;
  ee := (ee shl 10) or (ee shr (32 - 10));
  bb += data[5] + (cc xor dd xor ee);
  bb := ((bb shl 5) or (bb shr (32 - 5))) + aa;
  dd := (dd shl 10) or (dd shr (32 - 10));
  aa += data[8] + (bb xor cc xor dd);
  aa := ((aa shl 14) or (aa shr (32 - 14))) + ee;
  cc := (cc shl 10) or (cc shr (32 - 10));
  ee += data[7] + (aa xor bb xor cc);
  ee := ((ee shl 6) or (ee shr (32 - 6))) + dd;
  bb := (bb shl 10) or (bb shr (32 - 10));
  dd += data[6] + (ee xor aa xor bb);
  dd := ((dd shl 8) or (dd shr (32 - 8))) + cc;
  aa := (aa shl 10) or (aa shr (32 - 10));
  cc += data[2] + (dd xor ee xor aa);
  cc := ((cc shl 13) or (cc shr (32 - 13))) + bb;
  ee := (ee shl 10) or (ee shr (32 - 10));
  bb += data[13] + (cc xor dd xor ee);
  bb := ((bb shl 6) or (bb shr (32 - 6))) + aa;
  dd := (dd shl 10) or (dd shr (32 - 10));
  aa += data[14] + (bb xor cc xor dd);
  aa := ((aa shl 5) or (aa shr (32 - 5))) + ee;
  cc := (cc shl 10) or (cc shr (32 - 10));
  ee += data[0] + (aa xor bb xor cc);
  ee := ((ee shl 15) or (ee shr (32 - 15))) + dd;
  bb := (bb shl 10) or (bb shr (32 - 10));
  dd += data[3] + (ee xor aa xor bb);
  dd := ((dd shl 13) or (dd shr (32 - 13))) + cc;
  aa := (aa shl 10) or (aa shr (32 - 10));
  cc += data[9] + (dd xor ee xor aa);
  cc := ((cc shl 11) or (cc shr (32 - 11))) + bb;
  ee := (ee shl 10) or (ee shr (32 - 10));
  bb += data[11] + (cc xor dd xor ee);
  bb := ((bb shl 11) or (bb shr (32 - 11))) + aa;
  dd := (dd shl 10) or (dd shr (32 - 10));

  dd += c + FH[1];
  FH[1] := FH[2] + d + ee;
  FH[2] := FH[3] + e + aa;
  FH[3] := FH[4] + a + bb;
  FH[4] := FH[0] + b + cc;
  FH[0] := dd;
end;

constructor TrhlRIPEMD160.Create;
begin
  inherited Create;
  HashSize := 20;
end;

procedure TrhlRIPEMD160.Init;
begin
  inherited Init;
  FH[4] := $C3d2e1f0;
end;

end.
